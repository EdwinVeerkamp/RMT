apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'

// use jdk 1.7
sourceCompatibility = "1.7"

repositories {
    mavenCentral()
    mavenRepo name: "Spring Maven MILESTONE Repository", urls: ["http://maven.springframework.org/milestone"]
}

configurations {
    provided
}

// version properties
version_spring = "3.1.0.RELEASE"
version_spring_security = "3.1.0.RELEASE"
version_wicket = "1.5.5"
version_hibernate = "3.6.7.Final"
version_groovy = "1.8.6"


dependencies {
    compile(
            'org.springframework:spring-core:' + version_spring,
            'org.springframework:spring-context:' + version_spring,
            'org.springframework:spring-context-support:' + version_spring,
            'org.springframework.security:spring-security-web:' + version_spring_security,
            'org.apache.wicket:wicket-core:' + version_wicket,
            'org.apache.wicket:wicket-extensions:' + version_wicket,
            'org.apache.wicket:wicket-spring:' + version_wicket,
            'org.apache.wicket:wicket-datetime:' + version_wicket,
            'org.apache.wicket:wicket-devutils:' + version_wicket,
            'org.wicketstuff:wicketstuff-jsr303:1.5.0',
            'org.hibernate:hibernate-validator:4.2.0.Final',
            'org.hibernate:hibernate-entitymanager:' + version_hibernate,
            'org.springframework.data:spring-data-jpa:1.0.2.RELEASE',
            'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',
            'org.hibernate:hibernate-core:' + version_hibernate,
            'commons-beanutils:commons-beanutils:1.8.3',
            'commons-collections:commons-collections:3.2.1',
            'org.apache.commons:commons-lang3:3.0.1',
            'ch.qos.logback:logback-classic:0.9.30',
            'org.apache.httpcomponents:httpclient:4.1.2',
            'com.google.code.gson:gson:1.7.2',
            'joda-time:joda-time:2.0',
            'joda-time:joda-time-hibernate:1.3',
            'org.joda:joda-convert:1.1',
            'com.thoughtworks.xstream:xstream:1.4.1',
            'javax.mail:mail:1.4.4',
            'org.apache.velocity:velocity:1.7',
            'com.google.guava:guava:11.0.2',
            // TODO - jar needed for idea to use apt during compilation. possible to move to other configuration?
            'org.hibernate:hibernate-jpamodelgen:1.1.1.Final' ,
            'com.mysema.querydsl:querydsl-apt:2.5.0',
            'com.mysema.querydsl:querydsl-jpa:2.5.0'
    )
    runtime(
            'org.slf4j:jcl-over-slf4j:1.6.2',
            'c3p0:c3p0:0.9.1.2',
            'org.hibernate:hibernate-core:' + version_hibernate,
            'mysql:mysql-connector-java:5.1.16',
            'com.h2database:h2:1.3.160',
            'org.springframework.security:spring-security-web:' + version_spring_security,
            'org.springframework.security:spring-security-config:' + version_spring_security,
    )
    provided(
            // to be able to debug into tomcat code.
            'org.apache.tomcat:tomcat-catalina:7.0.25',
            'org.apache.tomcat:tomcat-util:7.0.25',
            'org.apache.tomcat:tomcat-coyote:7.0.25',
    )
    testCompile(
            'org.springframework:spring-test:' + version_spring,
            'org.dbunit:dbunit:2.4.8',
            'org.codehaus.groovy:groovy-all:' + version_groovy,
            'org.testng:testng:6.1.1', // current rel. 6.2.1 has dependency to com.google.inject
            'org.mockito:mockito-core:1.9.0-rc1',
            'javax.servlet:servlet-api:2.5'
    )
    groovy (
            'org.codehaus.groovy:groovy-all:' + version_groovy,
    )
}

// wicket app: need to copy .html files from java-src to output
sourceSets.main.resources.srcDirs('/src/main/java')
sourceSets.test.resources.srcDirs('/src/test/java')
sourceSets.test.resources.srcDirs('/src/test/groovy')

// add directory with db-unit files to test-classpath
sourceSets.test.resources.srcDirs('/src/test/database')


// needed to get querydsl preprocessor executed
// s. http://gradle.1045684.n5.nabble.com/Javac-Java-Annotation-Processor-Maven-classpath-dependencies-in-Gradle-td4626751.html
sourceSets {
    queryDsl {
        java {
            srcDir '/src/main/java'
        }
    }
}
compileQueryDslJava.destinationDir = file('/src/generated/querydsl')

compileJava.dependsOn compileQueryDslJava
clean.dependsOn cleanCompileQueryDslJava

sourceSets.main.java.srcDirs(compileQueryDslJava.destinationDir)

compileQueryDslJava {
    doFirst {
        println "Generating QueryDSL sources";
        println "Destination dir: " + destinationDir.absolutePath
    }
    options.compilerArgs = [
            "-processor", "com.mysema.query.apt.hibernate.HibernateAnnotationProcessor",
            "-proc:only",
            "-s", "${destinationDir.absolutePath}".toString()
    ]
}

/**
 * It's currently not possible to capture the console output of the tests.
 * Until it is fixed (http://issues.gradle.org/browse/GRADLE-1009) use the
 * log-file.
 */
test {
    useTestNG()
    exclude '**/*ManualTest.*'
}

/**
 * Use this task to update idea project file with dependencies.
 * It will remove existing dependencies before updating them.
 */
ideaModule {
    downloadJavadoc = true
    beforeConfigured { module ->
        module.dependencies.clear()
    }
}

// Find any 3rd party libraries which have released new versions
// to the central Maven repo since we last upgraded.
task checkLibVersions << {
    def checked = [:]
    allprojects {
        configurations.each { configuration ->
            configuration.allDependencies.each { dependency ->
                def version = dependency.version
                if (!version.contains('SNAPSHOT') && !checked[dependency]) {
                    def group = dependency.group
                    def path = group.replace('.', '/')
                    def name = dependency.name
                    def url = "http://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"
                    try {
                        def metadata = new XmlSlurper().parseText(url.toURL().text)
                        def versions = metadata.versioning.versions.version.collect { it.text() }
                        versions.removeAll { it.toLowerCase().contains('alpha') }
                        versions.removeAll { it.toLowerCase().contains('beta') }
                        versions.removeAll { it.toLowerCase().contains('rc') }
                        def newest = versions.max()
                        if (version != newest) {
                            println "$group:$name $version -> $newest"
                        }
                    } catch (FileNotFoundException e) {
                        logger.debug "Unable to download $url: $e.message"
                    } catch (org.xml.sax.SAXParseException e) {
                        logger.debug "Unable to parse $url: $e.message"
                    }
                    checked[dependency] = true
                }
            }
        }
    }
}